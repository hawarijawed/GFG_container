/*
There is an array arr of heights of stone and Geek is standing at the first stone and can jump to one of the following: Stone i+1, i+2, ... i+k stone, where k is the maximum number of 
steps that can be jumped and cost will be |hi-hj| is incurred, where j is the stone to land on. Find the minimum possible total cost incurred before the Geek reaches the last stone.


*/

class Solution {
    public int minimizeCost(int k, int arr[]) {
        // code here
         int n = arr.length;
        int[] dp = new int[n];
    
        // Initialize dp array with maximum values
        for (int i = 1; i < n; i++) {
            dp[i] = Integer.MAX_VALUE;
        }
    
        dp[0] = 0; // Starting point costs nothing

        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= k; j++) {
                if (i + j < n) { // Ensure we do not go out of bounds
                    dp[i + j] = Math.min(dp[i + j], dp[i] + Math.abs(arr[i] - arr[i + j]));
                 }
            }
        }
    
        return dp[n - 1]; // Return the minimum cost to reach the last index
    }
}
